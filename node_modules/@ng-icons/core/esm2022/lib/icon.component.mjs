import { ChangeDetectionStrategy, Component, ElementRef, HostBinding, inject, Injector, Input, runInInjectionContext, } from '@angular/core';
import { injectNgIconConfig } from './providers/icon-config.provider';
import { injectNgIconLoader, injectNgIconLoaderCache, } from './providers/icon-loader.provider';
import { injectNgIcons } from './providers/icon.provider';
import { coerceLoaderResult } from './utils/async';
import { toPropertyName } from './utils/format';
import * as i0 from "@angular/core";
export class NgIcon {
    constructor() {
        /** Access the global icon config */
        this.config = injectNgIconConfig();
        /** Access the icons */
        this.icons = injectNgIcons();
        /** Access the icon loader if defined */
        this.loader = injectNgIconLoader();
        /** Access the icon loader cache if defined */
        this.cache = injectNgIconLoaderCache();
        /** Access the injector */
        this.injector = inject(Injector);
        /** Access the element ref */
        this.elementRef = inject(ElementRef);
        this._size = this.config.size;
        /** Define the color of the icon */
        this.color = this.config.color;
    }
    /** Define the name of the icon to display */
    set name(name) {
        this.setIcon(name);
    }
    /** Define the size of the icon */
    set size(size) {
        // if the size only contains numbers, assume it is in pixels
        this._size = coerceCssPixelValue(size);
    }
    get size() {
        return this._size;
    }
    /**
     * Load the icon with the given name and insert it into the template.
     * @param name The name of the icon to load.
     */
    async setIcon(name) {
        const propertyName = toPropertyName(name);
        for (const icons of [...this.icons].reverse()) {
            if (icons[propertyName]) {
                // insert the SVG into the template
                this.elementRef.nativeElement.innerHTML = icons[propertyName];
                return;
            }
        }
        // if we have a cache check if the icon is already loaded
        if (this.cache?.has(name)) {
            this.elementRef.nativeElement.innerHTML = this.cache.get(name);
            return;
        }
        // if there is a loader defined, use it to load the icon
        if (this.loader) {
            const result = await this.requestIconFromLoader(name);
            // if the result is a string, insert the SVG into the template
            if (result !== null) {
                // if we have a cache, store the result
                this.cache?.set(name, result);
                this.elementRef.nativeElement.innerHTML = result;
                return;
            }
        }
        // if there is no icon with this name warn the user as they probably forgot to import it
        console.warn(`No icon named ${name} was found. You may need to import it using the withIcons function.`);
    }
    /**
     * Request the icon from the loader.
     * @param name The name of the icon to load.
     * @returns The SVG content for a given icon name.
     */
    requestIconFromLoader(name) {
        return new Promise(resolve => {
            runInInjectionContext(this.injector, async () => {
                const result = await coerceLoaderResult(this.loader(name));
                resolve(result);
            });
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: NgIcon, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.5", type: NgIcon, isStandalone: true, selector: "ng-icon", inputs: { name: "name", size: "size", strokeWidth: "strokeWidth", color: "color" }, host: { properties: { "style.--ng-icon__size": "this.size", "style.--ng-icon__stroke-width": "this.strokeWidth", "style.color": "this.color" } }, ngImport: i0, template: '', isInline: true, styles: [":host{display:inline-block;width:var(--ng-icon__size);height:var(--ng-icon__size)}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: NgIcon, decorators: [{
            type: Component,
            args: [{ selector: 'ng-icon', template: '', standalone: true, changeDetection: ChangeDetectionStrategy.OnPush, styles: [":host{display:inline-block;width:var(--ng-icon__size);height:var(--ng-icon__size)}\n"] }]
        }], propDecorators: { name: [{
                type: Input
            }], size: [{
                type: HostBinding,
                args: ['style.--ng-icon__size']
            }, {
                type: Input
            }], strokeWidth: [{
                type: HostBinding,
                args: ['style.--ng-icon__stroke-width']
            }, {
                type: Input
            }], color: [{
                type: HostBinding,
                args: ['style.color']
            }, {
                type: Input
            }] } });
function coerceCssPixelValue(value) {
    return value == null ? '' : /^\d+$/.test(value) ? `${value}px` : value;
}
//# sourceMappingURL=data:application/json;base64,